#!/bin/sh
#
#	Output a simple RPM spec file that uses no fancy features requring
#	RPM v4. This is intended to work with any RPM distro.
#
#	The only gothic bit here is redefining install_post to avoid
#	stripping the symbols from files in the kernel which we want
#
#	Patched for non-x86 by Opencon (L) 2002 <opencon@rio.skydome.net>
#

# how we were called determines which rpms we build and how we build them
if [ "$1" = "prebuilt" ]; then
	PREBUILT=true
else
	PREBUILT=false
fi

# starting to output the spec
if [ "`grep CONFIG_DRM=y .config | cut -f2 -d\=`" = "y" ]; then
	PROVIDES=kernel-drm
fi

PROVIDES="$PROVIDES kernel-$KERNELRELEASE"

echo "Name: kernel"
echo "Summary: The Linux Kernel"
echo "Version: ${KERNELRELEASE%-*}"
# we need to determine the NEXT version number so that uname and
# rpm -q will agree
echo "Release: ${KERNELRELEASE#*-}"
echo "License: GPL"
echo "Group: System Environment/Kernel"
echo "Vendor: The Linux Community"
echo "URL: http://www.kernel.org"

if ! $PREBUILT; then
echo "Source: kernel-$KERNELRELEASE.tar.gz"
fi

echo "BuildRoot: %{_tmppath}/%{name}-%{PACKAGE_VERSION}-root"
echo "Provides: $PROVIDES"
echo "%define __spec_install_post /usr/lib/rpm/brp-compress || :"
echo "%define debug_package %{nil}"
echo ""
echo "%description"
echo "The Linux Kernel, the operating system core itself"
echo ""

echo "%package devel"
echo "Summary: Development package for building kernel modules to match the $KERNELRELEASE kernel"
echo "Group: System Environment/Kernel"
echo "%description devel"
echo "This package provides kernel headers and makefiles sufficient to build modules against the $KERNELRELEASE kernel package."
echo ""

if ! $PREBUILT; then
echo "%prep"
echo "%setup -q"
echo ""
fi

echo "%build"

if ! $PREBUILT; then
echo "make clean && make %{?_smp_mflags}"
echo ""
fi

echo "%install"
echo "%ifarch ia64"
echo 'mkdir -p $RPM_BUILD_ROOT/boot/efi $RPM_BUILD_ROOT/lib/modules'
echo "%else"
echo 'mkdir -p $RPM_BUILD_ROOT/boot $RPM_BUILD_ROOT/lib/modules'
echo "%endif"

echo 'INSTALL_MOD_PATH=$RPM_BUILD_ROOT make %{_smp_mflags} modules_install'
echo 'rm -r $RPM_BUILD_ROOT/lib/firmware'

# Taken from the Fedora specfile
echo "KERNELRELEASE=\"$KERNELRELEASE\""
echo "DevelDir=\"/usr/src/kernels/$KERNELRELEASE\""
echo 'rm -f $RPM_BUILD_ROOT/lib/modules/$KERNELRELEASE/build'
echo 'rm -f $RPM_BUILD_ROOT/lib/modules/$KERNELRELEASE/source'
echo 'mkdir -p $RPM_BUILD_ROOT/lib/modules/$KERNELRELEASE/build'
echo '(cd $RPM_BUILD_ROOT/lib/modules/$KERNELRELEASE ; ln -s build source)'

# first copy everything
echo 'cp --parents `find  -type f -name "Makefile*" -o -name "Kconfig*"` $RPM_BUILD_ROOT/lib/modules/$KERNELRELEASE/build'
echo 'cp Module.symvers $RPM_BUILD_ROOT/lib/modules/$KERNELRELEASE/build'
echo 'cp System.map $RPM_BUILD_ROOT/lib/modules/$KERNELRELEASE/build'
echo 'if [ -s Module.markers ]; then'
echo '  cp Module.markers $RPM_BUILD_ROOT/lib/modules/$KERNELRELEASE/build'
echo 'fi'
# then drop all but the needed Makefiles/Kconfig files
echo 'rm -rf $RPM_BUILD_ROOT/lib/modules/$KERNELRELEASE/build/Documentation'
echo 'rm -rf $RPM_BUILD_ROOT/lib/modules/$KERNELRELEASE/build/scripts'
echo 'rm -rf $RPM_BUILD_ROOT/lib/modules/$KERNELRELEASE/build/include'
echo 'cp .config $RPM_BUILD_ROOT/lib/modules/$KERNELRELEASE/build'
echo 'cp -a scripts $RPM_BUILD_ROOT/lib/modules/$KERNELRELEASE/build'
echo 'if [ -d arch/$Arch/scripts ]; then'
echo '  cp -a arch/$Arch/scripts $RPM_BUILD_ROOT/lib/modules/$KERNELRELEASE/build/arch/%{_arch} || :'
echo 'fi'
echo 'if [ -f arch/$Arch/*lds ]; then'
echo '  cp -a arch/$Arch/*lds $RPM_BUILD_ROOT/lib/modules/$KERNELRELEASE/build/arch/%{_arch}/ || :'
echo 'fi'
echo 'rm -f $RPM_BUILD_ROOT/lib/modules/$KERNELRELEASE/build/scripts/*.o'
echo 'rm -f $RPM_BUILD_ROOT/lib/modules/$KERNELRELEASE/build/scripts/*/*.o'
echo 'if [ -d arch/%{asmarch}/include ]; then'
echo '  cp -a --parents arch/%{asmarch}/include $RPM_BUILD_ROOT/lib/modules/$KERNELRELEASE/build/'
echo 'fi'
echo 'mkdir -p $RPM_BUILD_ROOT/lib/modules/$KERNELRELEASE/build/include'
echo 'cd include'
echo 'cp -a acpi config crypto keys linux math-emu media mtd net pcmcia rdma rxrpc scsi sound trace video drm asm-generic $RPM_BUILD_ROOT/lib/modules/$KERNELRELEASE/build/include'
echo 'asmdir=$(readlink asm)'
echo 'cp -a $asmdir $RPM_BUILD_ROOT/lib/modules/$KERNELRELEASE/build/include/'
echo 'pushd $RPM_BUILD_ROOT/lib/modules/$KERNELRELEASE/build/include'
echo 'ln -s $asmdir asm'
echo 'popd'
# Make sure the Makefile and version.h have a matching timestamp so that
# external modules can be built
echo 'touch -r $RPM_BUILD_ROOT/lib/modules/$KERNELRELEASE/build/Makefile $RPM_BUILD_ROOT/lib/modules/$KERNELRELEASE/build/include/linux/version.h'
echo 'touch -r $RPM_BUILD_ROOT/lib/modules/$KERNELRELEASE/build/.config $RPM_BUILD_ROOT/lib/modules/$KERNELRELEASE/build/include/linux/autoconf.h'
# Cop' .config to include/config/auto.conf so "make prepare" is unnecessary.'
echo 'cp $RPM_BUILD_ROOT/lib/modules/$KERNELRELEASE/build/.config $RPM_BUILD_ROOT/lib/modules/$KERNELRELEASE/build/include/config/auto.conf'
echo 'cd ..'
# Move the devel headers out of the root file system
echo 'mkdir -p $RPM_BUILD_ROOT/usr/src/kernels'
echo 'mv $RPM_BUILD_ROOT/lib/modules/$KERNELRELEASE/build $RPM_BUILD_ROOT/$DevelDir'
echo 'ln -sf ../../..$DevelDir $RPM_BUILD_ROOT/lib/modules/$KERNELRELEASE/build'

echo "%ifarch ia64"
echo 'cp $KBUILD_IMAGE $RPM_BUILD_ROOT'"/boot/efi/vmlinuz-$KERNELRELEASE"
echo 'ln -s '"efi/vmlinuz-$KERNELRELEASE" '$RPM_BUILD_ROOT'"/boot/"
echo "%else"
echo "%ifarch ppc64"
echo "cp vmlinux arch/powerpc/boot"
echo "cp arch/powerpc/boot/"'$KBUILD_IMAGE $RPM_BUILD_ROOT'"/boot/vmlinuz-$KERNELRELEASE"
echo "%else"
echo 'cp $KBUILD_IMAGE $RPM_BUILD_ROOT'"/boot/vmlinuz-$KERNELRELEASE"
echo "%endif"
echo "%endif"

echo 'cp System.map $RPM_BUILD_ROOT'"/boot/System.map-$KERNELRELEASE"

echo 'cp .config $RPM_BUILD_ROOT'"/boot/config-$KERNELRELEASE"

echo "%ifnarch ppc64"
echo 'cp vmlinux vmlinux.orig'
echo 'bzip2 -9 vmlinux'
echo 'mv vmlinux.bz2 $RPM_BUILD_ROOT'"/boot/vmlinux-$KERNELRELEASE.bz2"
echo 'mv vmlinux.orig vmlinux'
echo "%endif"

echo ""

cat << EOF
%post
# this is verified to work with fedora 8 and suse 10.3
echo "Creating initrd..."
if [ -x /usr/lib/bootloader/bootloader_entry ] ; then
	#suse
	/sbin/mkinitrd -k /boot/vmlinuz-$KERNELRELEASE \
		-i /boot/initrd-$KERNELRELEASE
	/usr/lib/bootloader/bootloader_entry add \
		anoubis \
		$KERNELRELEASE \
		vmlinuz-$KERNELRELEASE \
		initrd-$KERNELRELEASE
elif [ -x /sbin/new-kernel-pkg ] ; then
	# fedora
	/sbin/new-kernel-pkg --package kernel-$KERNELRELEASE \
		--mkinitrd --depmod --install $KERNELRELEASE
else 
	echo "Warning: Don't know how to create initrd for this system"
fi

%preun 
echo "Removing initrd..."
if [ -x /usr/lib/bootloader/bootloader_entry ] ; then
	#suse
	rm -f /boot/initrd-$KERNELRELEASE
	/usr/lib/bootloader/bootloader_entry remove anoubis \
		$KERNELRELEASE \
		vmlinuz-$KERNELRELEASE \
		initrd-$KERNELRELEASE
elif [ -x /sbin/new-kernel-pkg ] ; then
	# fedora
	/sbin/new-kernel-pkg --package kernel-$KERNELRELEASE \
		--rminitrd --rmmoddep --remove $KERNELRELEASE
else 
	echo "Warning: Don't know how to remove initrd for this system"
fi
EOF

echo "%clean"
echo 'rm -rf $RPM_BUILD_ROOT'
echo ""
echo "%files"
echo '%defattr (-, root, root)'
echo "%dir /lib/modules"
echo "/lib/modules/$KERNELRELEASE"
echo "/boot/*"
echo ""
echo "%files devel"
echo "%dir /usr/src/kernels"
echo "/usr/src/kernels/$KERNELRELEASE"
echo ""

